{"version":3,"sources":["webpack:///src/app/pages/register/register.component.html","webpack:///src/app/pages/register/register.component.scss","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts"],"names":["RegisterComponent","fb","router","snackBar","hide","userTypes","id","name","registerForm","group","userType","required","username","compose","minLength","email","password","confirmPassword","receiveNewsletter","validator","values","valid","console","log","open","panelClass","verticalPosition","duration","selector","template","routes","path","component","pathMatch","RegisterModule","declarations","imports","forChild"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCWFA,iBAAiB;AAQ5B,iCAAmBC,EAAnB,EAA2CC,MAA3C,EAAiEC,QAAjE,EAAwF;AAAA;;AAArE,aAAAF,EAAA,GAAAA,EAAA;AAAwB,aAAAC,MAAA,GAAAA,MAAA;AAAsB,aAAAC,QAAA,GAAAA,QAAA;AAN1D,aAAAC,IAAA,GAAO,IAAP;AACA,aAAAC,SAAA,GAAY,CACjB;AAAEC,YAAE,EAAE,CAAN;AAASC,cAAI,EAAE;AAAf,SADiB,EAEjB;AAAED,YAAE,EAAE,CAAN;AAASC,cAAI,EAAE;AAAf,SAFiB,EAGjB;AAAED,YAAE,EAAE,CAAN;AAASC,cAAI,EAAE;AAAf,SAHiB,CAAZ;AAKoF;;AAR/D;AAAA;AAAA,mCAUjB;AACT,eAAKC,YAAL,GAAoB,KAAKP,EAAL,CAAQQ,KAAR,CAAc;AAChCC,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWC,QAAhB,CADsB;AAEhCC,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWC,OAAX,CAAmB,CAAC,0DAAWF,QAAZ,EAAsB,0DAAWG,SAAX,CAAqB,CAArB,CAAtB,CAAnB,CAAL,CAFsB;AAGhCC,iBAAK,EAAE,CAAC,EAAD,EAAK,0DAAWF,OAAX,CAAmB,CAAC,0DAAWF,QAAZ,EAAsB,iFAAtB,CAAnB,CAAL,CAHyB;AAIhCK,oBAAQ,EAAE,CAAC,EAAD,EAAK,0DAAWL,QAAhB,CAJsB;AAKhCM,2BAAe,EAAE,CAAC,EAAD,EAAK,0DAAWN,QAAhB,CALe;AAMhCO,6BAAiB,EAAE;AANa,WAAd,EAOlB;AAACC,qBAAS,EAAE,6FAAkB,UAAlB,EAA8B,iBAA9B;AAAZ,WAPkB,CAApB;AAQD;AAnB2B;AAAA;AAAA,6CAqBAC,MArBA,EAqBa;AACvC,cAAI,KAAKZ,YAAL,CAAkBa,KAAtB,EAA6B;AAC3BC,mBAAO,CAACC,GAAR,CAAYH,MAAZ;AACA,iBAAKjB,QAAL,CAAcqB,IAAd,CAAmB,8BAAnB,EAAmD,GAAnD,EAAwD;AAAEC,wBAAU,EAAE,SAAd;AAAyBC,8BAAgB,EAAE,KAA3C;AAAkDC,sBAAQ,EAAE;AAA5D,aAAxD;AACD;AACF;AA1B2B;;AAAA;AAAA,O;;;;cAVV;;cACX;;cACA;;;;AAQI3B,qBAAiB,eAL7B,gEAAU;AACT4B,cAAQ,EAAE,cADD;AAETC,cAAQ,EAAR;AAAA;AAAA,2GAFS;;;;AAAA,KAAV,CAK6B,E,iCAQL,0D,EAA2B,sD,EAAyB,uE,EAR/C,GAAjB7B,iBAAiB,CAAjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLN,QAAM8B,MAAM,GAAG,CACpB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE,qEAAvB;AAA0CC,eAAS,EAAE;AAArD,KADoB,CAAf;;QAYMC,cAAc;AAAA;AAAA,K;;AAAdA,kBAAc,eAR1B,+DAAS;AACRC,kBAAY,EAAE,CAAC,qEAAD,CADN;AAERC,aAAO,EAAE,CACP,4DADO,EAEP,6DAAaC,QAAb,CAAsBP,MAAtB,CAFO,EAGP,kEAHO;AAFD,KAAT,CAQ0B,GAAdI,cAAc,CAAd","file":"pages-register-register-module-es5.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n  \\r\\n      <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"my-3\\\">\\r\\n          <mat-card [style.max-width.px]=\\\"500\\\">\\r\\n            <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">  \\r\\n              <h1 class=\\\"uppercase\\\">Register</h1>  \\r\\n              <a mat-button routerLink=\\\"/login\\\" color=\\\"accent\\\" class=\\\"w-100\\\">Already have an account? Sign in!</a>  \\r\\n            </div>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterFormSubmit(registerForm.value)\\\"> \\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">group</mat-icon>\\r\\n                    <mat-label>User type</mat-label>\\r\\n                    <mat-select placeholder=\\\"Select User Type\\\" formControlName=\\\"userType\\\">\\r\\n                        <mat-option *ngFor=\\\"let type of userTypes\\\" [value]=\\\"type\\\">\\r\\n                            {{type.name}}\\r\\n                        </mat-option>\\r\\n                    </mat-select>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.userType.errors?.required\\\">User type is required</mat-error>                   \\r\\n                </mat-form-field>\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-2\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">person</mat-icon>\\r\\n                    <mat-label>Username</mat-label>\\r\\n                    <input matInput placeholder=\\\"Username\\\" formControlName=\\\"username\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.username.errors?.required\\\">Username is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.username.hasError('minlength')\\\">Username isn't long enough, minimum of 6 characters</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                    <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">email</mat-icon>\\r\\n                    <mat-label>Email</mat-label>\\r\\n                    <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                    <mat-error *ngIf=\\\"registerForm.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n                </mat-form-field>\\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                  <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                  <mat-label>Password</mat-label>\\r\\n                  <input matInput placeholder=\\\"Password\\\" formControlName=\\\"password\\\" type=\\\"password\\\" minlength=\\\"6\\\" required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.password.errors?.required\\\">Password is required</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.password.hasError('minlength')\\\">Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n                  <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                  </button>\\r\\n                </mat-form-field> \\r\\n                <mat-form-field  appearance=\\\"outline\\\" class=\\\"w-100 mt-1\\\">\\r\\n                  <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">lock</mat-icon>\\r\\n                  <mat-label>Confirm Password</mat-label>\\r\\n                  <input matInput placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" required [type]=\\\"hide ? 'password' : 'text'\\\">\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.errors?.required\\\">Confirm Password is required</mat-error>\\r\\n                  <mat-error *ngIf=\\\"registerForm.controls.confirmPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n                  <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" type=\\\"button\\\" class=\\\"text-muted\\\">\\r\\n                      <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\r\\n                  </button>\\r\\n                </mat-form-field> \\r\\n                <mat-slide-toggle formControlName=\\\"receiveNewsletter\\\" class=\\\"my-2\\\">Receive Newsletter</mat-slide-toggle>\\r\\n                <div class=\\\"text-center mt-2\\\"> \\r\\n                    <button mat-raised-button color=\\\"accent\\\" class=\\\"uppercase\\\" type=\\\"submit\\\">\\r\\n                        Create an Account\\r\\n                    </button>\\r\\n                </div> \\r\\n            </form>\\r\\n            <div class=\\\"divider mt-4\\\"></div> \\r\\n            <mat-card-actions fxLayoutAlign=\\\"center center\\\" class=\\\"text-center\\\">\\r\\n               <small class=\\\"my-3\\\">By clicking the \\\"Create an Account\\\" button you agree with our <a mat-button routerLink=\\\"/terms-conditions\\\" color=\\\"primary\\\" class=\\\"mx-2\\\">Terms and conditions</a> </small>\\r\\n            </mat-card-actions>\\r\\n          </mat-card>\\r\\n      </div> \\r\\n  \\r\\n    </div>\\r\\n  </div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3JlZ2lzdGVyL3JlZ2lzdGVyLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport { Router } from '@angular/router'; \r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { matchingPasswords, emailValidator } from 'src/app/theme/utils/app-validators';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  public registerForm: FormGroup;\r\n  public hide = true;\r\n  public userTypes = [\r\n    { id: 1, name: 'Agent' },\r\n    { id: 2, name: 'Agency' },\r\n    { id: 3, name: 'Buyer' }\r\n  ];\r\n  constructor(public fb: FormBuilder, public router:Router, public snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.fb.group({\r\n      userType: ['', Validators.required],\r\n      username: ['', Validators.compose([Validators.required, Validators.minLength(6)])],\r\n      email: ['', Validators.compose([Validators.required, emailValidator])],\r\n      password: ['', Validators.required],\r\n      confirmPassword: ['', Validators.required],\r\n      receiveNewsletter: false                            \r\n    },{validator: matchingPasswords('password', 'confirmPassword')});\r\n  }\r\n\r\n  public onRegisterFormSubmit(values:Object):void {\r\n    if (this.registerForm.valid) {\r\n      console.log(values);\r\n      this.snackBar.open('You registered successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { RegisterComponent } from './register.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: RegisterComponent, pathMatch: 'full'  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule\r\n  ]\r\n})\r\nexport class RegisterModule { }\r\n"]}