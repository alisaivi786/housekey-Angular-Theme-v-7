{"version":3,"sources":["./src/app/pages/submit-property/submit-property.component.html","./src/app/pages/submit-property/submit-property.component.scss","./src/app/pages/submit-property/submit-property.component.ts","./src/app/pages/submit-property/submit-property.module.ts"],"names":[],"mappings":"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","file":"pages-submit-property-submit-property-module-es2015.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n  \\r\\n      <mat-card ngClass.lt-lg=\\\"p-0\\\" [formGroup]=\\\"submitForm\\\">\\r\\n  \\r\\n        <mat-horizontal-stepper #horizontalStepper linear=\\\"true\\\" class=\\\"submit-property\\\" (selectionChange)=\\\"onSelectionChange($event)\\\">\\r\\n\\r\\n            <mat-step [stepControl]=\\\"submitForm.get('basic')\\\" label=\\\"Basic\\\">\\r\\n              <div class=\\\"step-content\\\">\\r\\n\\r\\n                  <form formGroupName=\\\"basic\\\" fxLayout=\\\"row wrap\\\">\\r\\n\\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n                        <h1 class=\\\"fw-500 text-center\\\">Basic</h1>\\r\\n                      </div>\\r\\n                              \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Title</mat-label>\\r\\n                            <input matInput placeholder=\\\"Title\\\" formControlName=\\\"title\\\" required autocomplete=\\\"off\\\">\\r\\n                            <mat-error *ngIf=\\\"submitForm.get('basic')['controls'].title.errors?.required\\\">Title is required</mat-error>\\r\\n                        </mat-form-field>\\r\\n                      </div>  \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Description</mat-label> \\r\\n                            <textarea matInput placeholder=\\\"Description\\\" formControlName=\\\"desc\\\" rows=\\\"7\\\"></textarea> \\r\\n                        </mat-form-field> \\r\\n                      </div> \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Price ($)</mat-label>\\r\\n                            <input matInput placeholder=\\\"Enter sale or rent price\\\" formControlName=\\\"priceDollar\\\" autocomplete=\\\"off\\\"> \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Price (€)</mat-label>\\r\\n                            <input matInput placeholder=\\\"Enter sale or rent price\\\" formControlName=\\\"priceEuro\\\" autocomplete=\\\"off\\\"> \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Property Type</mat-label> \\r\\n                            <mat-select placeholder=\\\"Select Property Type\\\" formControlName=\\\"propertyType\\\" required>\\r\\n                                <mat-option *ngFor=\\\"let propertyType of propertyTypes\\\" [value]=\\\"propertyType\\\">\\r\\n                                    {{propertyType.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>\\r\\n                            <mat-error *ngIf=\\\"submitForm.get('basic')['controls'].propertyType.errors?.required\\\">Property Type is required</mat-error>                               \\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Property Status</mat-label>\\r\\n                            <mat-select placeholder=\\\"Select Property Status\\\" formControlName=\\\"propertyStatus\\\" multiple>\\r\\n                                <mat-option *ngFor=\\\"let propertyStatus of propertyStatuses\\\" [value]=\\\"propertyStatus\\\">\\r\\n                                    {{propertyStatus.name}}\\r\\n                                </mat-option>\\r\\n                            </mat-select>                             \\r\\n                        </mat-form-field>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"step-section pb-2\\\">\\r\\n                          <p class=\\\"mb-0\\\"><span class=\\\"uppercase fw-500\\\">Gallery</span><span class=\\\"text-muted mx-3\\\">(max 8 images)</span></p>  \\r\\n                          <input-file formControlName=\\\"gallery\\\" fileLimit=\\\"8\\\" fileAccept=\\\"image/*\\\"></input-file>  \\r\\n                      </div> \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"end center\\\">\\r\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                          <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n                          <mat-icon>navigate_next</mat-icon>\\r\\n                        </button> \\r\\n                      </div> \\r\\n                  \\r\\n                  </form>\\r\\n               \\r\\n              </div>\\r\\n            </mat-step>\\r\\n            \\r\\n            <mat-step [stepControl]=\\\"submitForm.get('address')\\\" label=\\\"Address\\\">\\r\\n              <div class=\\\"step-content\\\">\\r\\n\\r\\n                  <form formGroupName=\\\"address\\\" fxLayout=\\\"row wrap\\\">\\r\\n            \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n                        <h1 class=\\\"fw-500 text-center\\\">Address</h1>\\r\\n                      </div>\\r\\n                                \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">location_on</mat-icon>\\r\\n                            <mat-label>Location</mat-label>\\r\\n                            <input matInput placeholder=\\\"Enter a location\\\" formControlName=\\\"location\\\" autocomplete=\\\"off\\\" #addressAutocomplete> \\r\\n                            <button *ngIf=\\\"submitForm.get('address')['controls'].location.value\\\" mat-button matSuffix mat-icon-button (click)=\\\"submitForm.get('address')['controls'].location.setValue(null)\\\" type=\\\"button\\\">\\r\\n                              <mat-icon>close</mat-icon>\\r\\n                            </button>\\r\\n                            <mat-error *ngIf=\\\"submitForm.get('address')['controls'].location.errors?.required\\\">Location is required</mat-error>   \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"px-2 mb-4\\\">\\r\\n                          <agm-map [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [zoom]=\\\"zoom\\\" [mapTypeControl]=\\\"true\\\" [fullscreenControl]=\\\"true\\\" (mapClick)=\\\"onMapClick($event)\\\">\\r\\n                              <agm-marker [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [markerDraggable]=\\\"true\\\" (markerClick)=\\\"onMarkerClick($event)\\\"></agm-marker>\\r\\n                          </agm-map>\\r\\n                      </div>\\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>City</mat-label>\\r\\n                            <mat-select placeholder=\\\"Select City...\\\" formControlName=\\\"city\\\" (selectionChange)=\\\"onSelectCity()\\\" required> \\r\\n                              <mat-option *ngFor=\\\"let city of cities\\\" [value]=\\\"city\\\">\\r\\n                                {{city.name}}\\r\\n                              </mat-option>\\r\\n                            </mat-select> \\r\\n                            <mat-error *ngIf=\\\"submitForm.get('address')['controls'].city.errors?.required\\\">City is required</mat-error>                    \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Zip Code</mat-label>\\r\\n                            <input matInput placeholder=\\\"exp. 98104\\\" autocomplete=\\\"off\\\" formControlName=\\\"zipCode\\\">                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                          <mat-label>Neighborhood</mat-label>\\r\\n                          <mat-select placeholder=\\\"Select Neighborhood...\\\" formControlName=\\\"neighborhood\\\" multiple (selectionChange)=\\\"onSelectNeighborhood()\\\">\\r\\n                            <mat-option *ngFor=\\\"let neighborhood of neighborhoods | filterNeighborhoods: submitForm.get('address')['controls'].city.value?.id\\\" [value]=\\\"neighborhood\\\">\\r\\n                              {{neighborhood.name}}\\r\\n                            </mat-option>\\r\\n                          </mat-select>   \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                        <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                          <mat-label>Street</mat-label>\\r\\n                          <mat-select placeholder=\\\"Select Street...\\\" formControlName=\\\"street\\\" multiple> \\r\\n                            <mat-option *ngFor=\\\"let street of streets | filterStreets : { neighborhoods: submitForm.get('address')['controls'].neighborhood.value?.id, cityId:submitForm.get('address')['controls'].city.value?.id } \\\" [value]=\\\"street\\\">\\r\\n                              {{street.name}}\\r\\n                            </mat-option>\\r\\n                          </mat-select>  \\r\\n                        </mat-form-field>\\r\\n                      </div> \\r\\n                    \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperPrevious fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                          <mat-icon>navigate_before</mat-icon>\\r\\n                          <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n                        </button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                          <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n                          <mat-icon>navigate_next</mat-icon>\\r\\n                        </button> \\r\\n                      </div>  \\r\\n                    \\r\\n                  </form>\\r\\n                \\r\\n              </div> \\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step [stepControl]=\\\"submitForm.get('additional')\\\" label=\\\"Additional\\\">\\r\\n              <div class=\\\"step-content\\\">\\r\\n\\r\\n                  <form formGroupName=\\\"additional\\\" fxLayout=\\\"row wrap\\\">\\r\\n    \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n                        <h1 class=\\\"fw-500 text-center\\\">Additional</h1>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Bedrooms</mat-label>\\r\\n                            <input matInput placeholder=\\\"bedrooms\\\" autocomplete=\\\"off\\\" formControlName=\\\"bedrooms\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Bathrooms</mat-label>\\r\\n                            <input matInput placeholder=\\\"bathrooms\\\" autocomplete=\\\"off\\\" formControlName=\\\"bathrooms\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Garages</mat-label>\\r\\n                            <input matInput placeholder=\\\"Garages\\\" autocomplete=\\\"off\\\" formControlName=\\\"garages\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                      \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Area (ft²)</mat-label>\\r\\n                            <input matInput placeholder=\\\"Area\\\" autocomplete=\\\"off\\\" formControlName=\\\"area\\\" onlyNumber>                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                      \\r\\n                      <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n                          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                            <mat-label>Year Built</mat-label>\\r\\n                            <input matInput placeholder=\\\"Year Built\\\" autocomplete=\\\"off\\\" formControlName=\\\"yearBuilt\\\" onlyNumber  maxlength=\\\"4\\\">                  \\r\\n                          </mat-form-field>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"mb-2\\\"> \\r\\n                          <p class=\\\"uppercase m-2 fw-500\\\">Features</p> \\r\\n                          <div formArrayName=\\\"features\\\" fxLayout=\\\"row wrap\\\">\\r\\n                              <div [formGroupName]=\\\"i\\\" *ngFor=\\\"let control of submitForm.get('additional')['controls'].features['controls']; index as i\\\" class=\\\"p-2\\\">\\r\\n                                  <mat-checkbox formControlName=\\\"selected\\\">{{features[i].name}}</mat-checkbox>                         \\r\\n                              </div>\\r\\n                          </div>\\r\\n                      </div>\\r\\n                  \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperPrevious fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                          <mat-icon>navigate_before</mat-icon>\\r\\n                          <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n                        </button>\\r\\n                        <button mat-raised-button color=\\\"primary\\\" matStepperNext fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                          <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n                          <mat-icon>navigate_next</mat-icon>\\r\\n                        </button> \\r\\n                      </div>  \\r\\n                  \\r\\n                  \\r\\n                  </form>\\r\\n                  \\r\\n                \\r\\n              </div> \\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step [stepControl]=\\\"submitForm.get('media')\\\" label=\\\"Media\\\">\\r\\n              <div class=\\\"step-content\\\">\\r\\n\\r\\n                  <form formGroupName=\\\"media\\\" fxLayout=\\\"row wrap\\\">    \\r\\n                   \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n                        <h1 class=\\\"fw-500 text-center\\\">Media</h1>\\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n                          <p class=\\\"mb-0\\\"><span class=\\\"uppercase fw-500\\\">Videos</span><span class=\\\"text-muted mx-3\\\">(video link to .mp4)</span></p>                            \\r\\n                          <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addVideo()\\\" matTooltip=\\\"Add New Video\\\" matTooltipPosition=\\\"after\\\">\\r\\n                              <mat-icon>add_circle</mat-icon>\\r\\n                          </button>\\r\\n                      </div> \\r\\n                      <div formArrayName=\\\"videos\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n                          <div *ngFor=\\\"let item of submitForm.get('media')['controls'].videos['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section\\\">\\r\\n                              <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                              <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Name</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Video name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Link</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Link to video\\\" formControlName=\\\"link\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field>                                                 \\r\\n                              </div>\\r\\n                              <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                                  <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteVideo(i)\\\" matTooltip=\\\"Delete Video\\\">\\r\\n                                      <mat-icon>cancel</mat-icon>\\r\\n                                  </button>\\r\\n                              </div>                            \\r\\n                          </div>        \\r\\n                      </div>\\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n                          <p class=\\\"uppercase fw-500 mb-0\\\">Plans</p>                            \\r\\n                          <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addPlan()\\\" matTooltip=\\\"Add New Plan\\\" matTooltipPosition=\\\"after\\\" class=\\\"mx-3\\\">\\r\\n                              <mat-icon>add_circle</mat-icon>\\r\\n                          </button>\\r\\n                      </div> \\r\\n                      <div formArrayName=\\\"plans\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n                          <div *ngFor=\\\"let item of submitForm.get('media')['controls'].plans['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section pb-2\\\">\\r\\n                              <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                              <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Name</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Plan name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Desc</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Description\\\" formControlName=\\\"desc\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field> \\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Area (ft²)</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Area\\\" formControlName=\\\"area\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Rooms</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Rooms\\\" formControlName=\\\"rooms\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Baths</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Baths\\\" formControlName=\\\"baths\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                                  </mat-form-field>\\r\\n                                  <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">  \\r\\n                                      <input-file placeholder=\\\"Image (or link to image)\\\" formControlName=\\\"image\\\" fileLimit=\\\"1\\\" fileAccept=\\\"image/*\\\" [linkEnabled]=\\\"true\\\"></input-file>  \\r\\n                                  </div>                \\r\\n                              </div>\\r\\n                              <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                                  <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deletePlan(i)\\\" matTooltip=\\\"Delete Plan\\\">\\r\\n                                      <mat-icon>cancel</mat-icon>\\r\\n                                  </button>\\r\\n                              </div>  \\r\\n                          </div>        \\r\\n                      </div> \\r\\n                  \\r\\n                      \\r\\n                      <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n                          <p class=\\\"mb-0 uppercase fw-500\\\">Additional features</p>                            \\r\\n                          <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addFeature()\\\" matTooltip=\\\"Add New Feature\\\" matTooltipPosition=\\\"after\\\">\\r\\n                              <mat-icon>add_circle</mat-icon>\\r\\n                          </button>\\r\\n                      </div> \\r\\n                      <div formArrayName=\\\"additionalFeatures\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n                          <div *ngFor=\\\"let item of submitForm.get('media')['controls'].additionalFeatures['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section\\\">\\r\\n                              <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                              <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Name</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Feature name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field>\\r\\n                                  <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                                      <mat-label>Value</mat-label>\\r\\n                                      <input matInput placeholder=\\\"Feature value\\\" formControlName=\\\"value\\\" autocomplete=\\\"off\\\">     \\r\\n                                  </mat-form-field>                                                 \\r\\n                              </div>\\r\\n                              <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                                  <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteFeature(i)\\\" matTooltip=\\\"Delete Feature\\\">\\r\\n                                      <mat-icon>cancel</mat-icon>\\r\\n                                  </button>\\r\\n                              </div>                            \\r\\n                          </div>        \\r\\n                      </div>\\r\\n                  \\r\\n                  \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"py-3\\\">\\r\\n                          <mat-slide-toggle formControlName=\\\"featured\\\">Featured</mat-slide-toggle>\\r\\n                      </div>\\r\\n                     \\r\\n                      <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n                          <button mat-raised-button color=\\\"primary\\\" matStepperPrevious fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                              <mat-icon>navigate_before</mat-icon>\\r\\n                              <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n                          </button>\\r\\n                          <button mat-raised-button color=\\\"primary\\\" matStepperNext fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" type=\\\"button\\\">\\r\\n                              <span class=\\\"mx-1 uppercase\\\">Submit</span>                    \\r\\n                              <mat-icon>navigate_next</mat-icon>\\r\\n                          </button> \\r\\n                      </div> \\r\\n                   \\r\\n                  \\r\\n                  </form>\\r\\n                \\r\\n              </div> \\r\\n            </mat-step>\\r\\n\\r\\n            <mat-step label=\\\"Confirmation\\\">\\r\\n              <div class=\\\"step-content\\\">\\r\\n                \\r\\n                  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"pt-5 text-center\\\"> \\r\\n                    <button mat-fab color=\\\"primary\\\"><mat-icon>check</mat-icon></button>\\r\\n                    <h2 class=\\\"mt-3 uppercase\\\">Congratulation!</h2>\\r\\n                    <h2 class=\\\"my-3\\\">Your property <span class=\\\"primary-color\\\">\\\"{{submitForm.get('basic')['controls'].title.value}}\\\"</span> has been submitted</h2>\\r\\n                    <p class=\\\"text-muted\\\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed tempus dolor ante, ut luctus mi faucibus a. Ut eu tincidunt neque. Proin porttitor id ligula id placerat. Integer nec nulla varius, dapibus libero quis, semper eros. Aliquam erat volutpat. Proin volutpat tellus vel purus interdum euismod.</p>\\r\\n                  </div>\\r\\n                  <div fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"pt-3\\\">  \\r\\n                    <button mat-raised-button color=\\\"accent\\\" (click)=\\\"reset()\\\" type=\\\"button\\\">Return to submit new property</button>       \\r\\n                  </div>\\r\\n\\r\\n              </div> \\r\\n            </mat-step>\\r\\n\\r\\n        </mat-horizontal-stepper>\\r\\n\\r\\n      </mat-card>\\r\\n\\r\\n\\r\\n    </div>\\r\\n</div>\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3N1Ym1pdC1wcm9wZXJ0eS9zdWJtaXQtcHJvcGVydHkuY29tcG9uZW50LnNjc3MifQ== */\";","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, OnInit, ViewChild, ElementRef, NgZone } from '@angular/core';\r\nimport { MatStepper } from '@angular/material/stepper';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { MapsAPILoader } from '@agm/core';\r\n\r\n@Component({\r\n  selector: 'app-submit-property',\r\n  templateUrl: './submit-property.component.html',\r\n  styleUrls: ['./submit-property.component.scss']\r\n})\r\nexport class SubmitPropertyComponent implements OnInit {\r\n  @ViewChild('horizontalStepper') horizontalStepper: MatStepper; \r\n  @ViewChild('addressAutocomplete') addressAutocomplete: ElementRef;\r\n  public submitForm:FormGroup; \r\n  public features = [];\r\n  public propertyTypes = [];\r\n  public propertyStatuses = [];\r\n  public cities = [];\r\n  public neighborhoods = [];\r\n  public streets = [];\r\n  public lat: number = 40.678178;\r\n  public lng: number = -73.944158;\r\n  public zoom: number = 12;  \r\n\r\n  constructor(public appService:AppService, \r\n              private fb: FormBuilder, \r\n              private mapsAPILoader: MapsAPILoader, \r\n              private ngZone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    this.features = this.appService.getFeatures();  \r\n    this.propertyTypes = this.appService.getPropertyTypes();\r\n    this.propertyStatuses = this.appService.getPropertyStatuses();\r\n    this.cities = this.appService.getCities();\r\n    this.neighborhoods = this.appService.getNeighborhoods();\r\n    this.streets = this.appService.getStreets();  \r\n\r\n    this.submitForm = this.fb.group({\r\n      basic: this.fb.group({\r\n        title: [null, Validators.required],\r\n        desc: null,\r\n        priceDollar: null,\r\n        priceEuro: null,\r\n        propertyType: [null, Validators.required],\r\n        propertyStatus: null, \r\n        gallery: null\r\n      }),\r\n      address: this.fb.group({\r\n        location: ['', Validators.required],\r\n        city: ['', Validators.required],\r\n        zipCode: '',\r\n        neighborhood: '',\r\n        street: ''\r\n      }),\r\n      additional: this.fb.group({\r\n        bedrooms: '',\r\n        bathrooms: '',\r\n        garages: '',\r\n        area: '',\r\n        yearBuilt: '',\r\n        features: this.buildFeatures()\r\n      }),\r\n      media: this.fb.group({\r\n        videos: this.fb.array([ this.createVideo() ]),\r\n        plans: this.fb.array([ this.createPlan() ]), \r\n        additionalFeatures: this.fb.array([ this.createFeature() ]),\r\n        featured: false\r\n      })\r\n    }); \r\n\r\n    this.setCurrentPosition();\r\n    this.placesAutocomplete();\r\n  }\r\n\r\n\r\n  public onSelectionChange(e:any){ \r\n    if(e.selectedIndex == 4){   \r\n      this.horizontalStepper._steps.forEach(step => step.editable = false);\r\n      console.log(this.submitForm.value);      \r\n    }\r\n  }\r\n  public reset(){\r\n    this.horizontalStepper.reset(); \r\n\r\n    const videos = <FormArray>this.submitForm.controls.media.get('videos');\r\n    while (videos.length > 1) {\r\n      videos.removeAt(0)\r\n    }\r\n    const plans = <FormArray>this.submitForm.controls.media.get('plans');\r\n    while (plans.length > 1) {\r\n      plans.removeAt(0)\r\n    }\r\n    const additionalFeatures = <FormArray>this.submitForm.controls.media.get('additionalFeatures');\r\n    while (additionalFeatures.length > 1) {\r\n      additionalFeatures.removeAt(0)\r\n    }\r\n    \r\n    this.submitForm.reset({\r\n      additional: {\r\n        features: this.features\r\n      },\r\n      media:{ \r\n        featured: false\r\n      }\r\n    });   \r\n     \r\n  }\r\n\r\n  \r\n\r\n  // -------------------- Address ---------------------------  \r\n  public onSelectCity(){\r\n    this.submitForm.controls.address.get('neighborhood').setValue(null, {emitEvent: false});\r\n    this.submitForm.controls.address.get('street').setValue(null, {emitEvent: false});\r\n  }\r\n  public onSelectNeighborhood(){\r\n    this.submitForm.controls.address.get('street').setValue(null, {emitEvent: false}); \r\n  }\r\n\r\n  private setCurrentPosition() {\r\n    if(\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition((position) => { \r\n        this.lat = position.coords.latitude;\r\n        this.lng = position.coords.longitude; \r\n      });\r\n    }\r\n  }\r\n  private placesAutocomplete(){ \r\n    this.mapsAPILoader.load().then(() => {\r\n      let autocomplete = new google.maps.places.Autocomplete(this.addressAutocomplete.nativeElement, {\r\n        types: [\"address\"]\r\n      });\r\n      autocomplete.addListener(\"place_changed\", () => {\r\n        this.ngZone.run(() => { \r\n          let place: google.maps.places.PlaceResult = autocomplete.getPlace(); \r\n          if (place.geometry === undefined || place.geometry === null) {\r\n            return;\r\n          };\r\n          this.lat = place.geometry.location.lat();\r\n          this.lng = place.geometry.location.lng(); \r\n          this.getAddress();\r\n        });\r\n      });\r\n    });\r\n  } \r\n  \r\n   // public getAddress(){    \r\n  //   this.mapsAPILoader.load().then(() => {\r\n  //     let geocoder = new google.maps.Geocoder();\r\n  //     let latlng = new google.maps.LatLng(this.lat, this.lng); \r\n  //     geocoder.geocode({'location': latlng}, (results, status) => {\r\n  //       if(status === google.maps.GeocoderStatus.OK) {\r\n  //         console.log(results); \r\n  //         //this.addresstext.nativeElement.focus();  \r\n  //         let address = results[0].formatted_address; \r\n  //         this.submitForm.controls.location.setValue(address); \r\n  //         this.setAddresses(results[0]);          \r\n  //       }\r\n  //     });\r\n  //   });\r\n  // }\r\n  public getAddress(){    \r\n    this.appService.getAddress(this.lat, this.lng).subscribe(response => {  \r\n      console.log(response);\r\n      if(response['results'].length){\r\n        let address = response['results'][0].formatted_address; \r\n        this.submitForm.controls.address.get('location').setValue(address); \r\n        this.setAddresses(response['results'][0]); \r\n      } \r\n    })\r\n  }\r\n  public onMapClick(e:any){\r\n    this.lat = e.coords.lat;\r\n    this.lng = e.coords.lng; \r\n    this.getAddress();\r\n  }\r\n  public onMarkerClick(e:any){\r\n    console.log(e);\r\n  }\r\n  \r\n  public setAddresses(result){\r\n    this.submitForm.controls.address.get('city').setValue(null);\r\n    this.submitForm.controls.address.get('zipCode').setValue(null);\r\n    this.submitForm.controls.address.get('street').setValue(null); \r\n\r\n    var newCity, newStreet, newNeighborhood;\r\n    \r\n    result.address_components.forEach(item =>{\r\n      if(item.types.indexOf('locality') > -1){  \r\n        if(this.cities.filter(city => city.name == item.long_name)[0]){\r\n          newCity = this.cities.filter(city => city.name == item.long_name)[0];\r\n        }\r\n        else{\r\n          newCity = { id: this.cities.length+1, name: item.long_name };\r\n          this.cities.push(newCity); \r\n        }\r\n        this.submitForm.controls.address.get('city').setValue(newCity);    \r\n      }\r\n      if(item.types.indexOf('postal_code') > -1){ \r\n        this.submitForm.controls.address.get('zipCode').setValue(item.long_name);\r\n      }\r\n    });\r\n\r\n    if(!newCity){\r\n      result.address_components.forEach(item =>{\r\n        if(item.types.indexOf('administrative_area_level_1') > -1){  \r\n          if(this.cities.filter(city => city.name == item.long_name)[0]){\r\n            newCity = this.cities.filter(city => city.name == item.long_name)[0];\r\n          }\r\n          else{\r\n            newCity = { \r\n              id: this.cities.length+1, \r\n              name: item.long_name \r\n            };\r\n            this.cities.push(newCity); \r\n          }\r\n          this.submitForm.controls.address.get('city').setValue(newCity);    \r\n        } \r\n      });\r\n    }\r\n\r\n    if(newCity){\r\n      result.address_components.forEach(item =>{ \r\n        if(item.types.indexOf('neighborhood') > -1){ \r\n          let neighborhood = this.neighborhoods.filter(n => n.name == item.long_name && n.cityId == newCity.id)[0];\r\n          if(neighborhood){\r\n            newNeighborhood = neighborhood;\r\n          }\r\n          else{\r\n            newNeighborhood = { \r\n              id: this.neighborhoods.length+1, \r\n              name: item.long_name, \r\n              cityId: newCity.id \r\n            };\r\n            this.neighborhoods.push(newNeighborhood);\r\n          }\r\n          this.neighborhoods = [...this.neighborhoods];\r\n          this.submitForm.controls.address.get('neighborhood').setValue([newNeighborhood]); \r\n        }  \r\n      })\r\n    }\r\n\r\n    if(newCity){\r\n      result.address_components.forEach(item =>{            \r\n        if(item.types.indexOf('route') > -1){ \r\n          if(this.streets.filter(street => street.name == item.long_name && street.cityId == newCity.id)[0]){\r\n            newStreet = this.streets.filter(street => street.name == item.long_name && street.cityId == newCity.id)[0];\r\n          }\r\n          else{\r\n            newStreet = { \r\n              id: this.streets.length+1, \r\n              name: item.long_name, \r\n              cityId: newCity.id, \r\n              neighborhoodId: (newNeighborhood) ? newNeighborhood.id : null \r\n            };\r\n            this.streets.push(newStreet);\r\n          }          \r\n          this.streets = [...this.streets];\r\n          this.submitForm.controls.address.get('street').setValue([newStreet]); \r\n        }\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n   \r\n  // -------------------- Additional ---------------------------  \r\n  public buildFeatures() {\r\n    const arr = this.features.map(feature => { \r\n      return this.fb.group({\r\n        id: feature.id,\r\n        name: feature.name,\r\n        selected: feature.selected\r\n      });\r\n    })   \r\n    return this.fb.array(arr);\r\n  }\r\n  \r\n\r\n  \r\n  // -------------------- Media --------------------------- \r\n  public createVideo(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      link: null \r\n    });\r\n  }\r\n  public addVideo(): void {\r\n    const videos = this.submitForm.controls.media.get('videos') as FormArray;\r\n    videos.push(this.createVideo());\r\n  }\r\n  public deleteVideo(index) {\r\n    const videos = this.submitForm.controls.media.get('videos') as FormArray;\r\n    videos.removeAt(index);\r\n  }\r\n  \r\n  public createPlan(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      desc: null,\r\n      area: null,\r\n      rooms: null,\r\n      baths: null,\r\n      image: null\r\n    });\r\n  }\r\n  public addPlan(): void {\r\n    const plans = this.submitForm.controls.media.get('plans') as FormArray;\r\n    plans.push(this.createPlan());\r\n  }\r\n  public deletePlan(index) {\r\n    const plans = this.submitForm.controls.media.get('plans') as FormArray;\r\n    plans.removeAt(index);\r\n  } \r\n\r\n\r\n  public createFeature(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      value: null \r\n    });\r\n  }\r\n  public addFeature(): void {\r\n    const features = this.submitForm.controls.media.get('additionalFeatures') as FormArray;\r\n    features.push(this.createFeature());\r\n  }\r\n  public deleteFeature(index) {\r\n    const features = this.submitForm.controls.media.get('additionalFeatures') as FormArray;\r\n    features.removeAt(index);\r\n  } \r\n\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { AgmCoreModule } from '@agm/core';  \r\nimport { InputFileModule } from 'ngx-input-file';\r\nimport { SubmitPropertyComponent } from './submit-property.component';\r\n\r\nexport const routes = [\r\n  { path: '', component: SubmitPropertyComponent, pathMatch: 'full'  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [SubmitPropertyComponent],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule,\r\n    AgmCoreModule, \r\n    InputFileModule\r\n  ]\r\n})\r\nexport class SubmitPropertyModule { }\r\n"],"sourceRoot":"webpack:///"}