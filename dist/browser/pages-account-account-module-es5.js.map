{"version":3,"sources":["webpack:///src/app/pages/account/account.component.html","webpack:///src/app/pages/account/dashboard/dashboard.component.html","webpack:///src/app/pages/account/edit-property/edit-property.component.html","webpack:///src/app/pages/account/favorites/favorites.component.html","webpack:///src/app/pages/account/my-properties/my-properties.component.html","webpack:///src/app/pages/account/profile/profile.component.html","webpack:///src/app/pages/account/account.component.scss","webpack:///src/app/pages/account/account.component.ts","webpack:///src/app/pages/account/account.module.ts","webpack:///src/app/pages/account/dashboard/dashboard.component.scss","webpack:///src/app/pages/account/dashboard/dashboard.component.ts","webpack:///src/app/pages/account/edit-property/edit-property.component.scss","webpack:///src/app/pages/account/edit-property/edit-property.component.ts","webpack:///src/app/pages/account/favorites/favorites.component.scss","webpack:///src/app/pages/account/favorites/favorites.component.ts","webpack:///src/app/pages/account/my-properties/my-properties.component.scss","webpack:///src/app/pages/account/my-properties/my-properties.component.ts","webpack:///src/app/pages/account/profile/profile.component.scss","webpack:///src/app/pages/account/profile/profile.component.ts"],"names":["AccountComponent","router","psConfig","wheelPropagation","sidenavOpen","links","name","href","icon","window","innerWidth","events","subscribe","event","sidenav","close","selector","template","routes","path","component","children","redirectTo","pathMatch","AccountModule","declarations","imports","forChild","DashboardComponent","EditPropertyComponent","appService","activatedRoute","fb","mapsAPILoader","ngZone","snackBar","features","propertyTypes","propertyStatuses","cities","neighborhoods","streets","lat","lng","zoom","step","getFeatures","getPropertyTypes","getPropertyStatuses","getCities","getNeighborhoods","getStreets","submitForm","group","basic","title","required","desc","priceDollar","priceEuro","propertyType","propertyStatus","gallery","address","location","city","zipCode","neighborhood","street","additional","bedrooms","bathrooms","garages","area","yearBuilt","buildFeatures","media","videos","array","createVideo","plans","createPlan","additionalFeatures","createFeature","featured","placesAutocomplete","sub","params","getPropertyById","unsubscribe","id","data","console","log","property","controls","get","setValue","sale","rent","filter","p","statusList","forEach","status","push","images","item","image","link","medium","preview","formattedAddress","getAddress","value","feature","selected","length","removeAt","video","plan","rooms","baths","index","emitEvent","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","load","then","autocomplete","google","maps","places","Autocomplete","addressAutocomplete","nativeElement","types","addListener","run","place","getPlace","geometry","undefined","response","formatted_address","setAddresses","e","result","newCity","newStreet","newNeighborhood","address_components","indexOf","long_name","n","cityId","neighborhoodId","arr","map","form","valid","nextStep","open","verticalPosition","duration","FavoritesComponent","displayedColumns","dataSource","Data","favorites","paginator","sort","splice","filterValue","trim","toLowerCase","firstPage","MyPropertiesComponent","getProperties","res","ProfileComponent","formBuilder","infoForm","compose","minLength","email","phone","organization","facebook","twitter","linkedin","instagram","website","passwordForm","currentPassword","newPassword","confirmNewPassword","validator","values","panelClass"],"mappings":"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","file":"pages-account-account-module-es5.js","sourcesContent":["export default \"<div class=\\\"p-3\\\">\\r\\n    <div class=\\\"theme-container\\\">\\r\\n\\r\\n        <mat-sidenav-container class=\\\"account\\\">\\r\\n            <mat-sidenav #sidenav [opened]=\\\"sidenavOpen\\\" [mode]=\\\"sidenavOpen ? 'side' : 'over'\\\" class=\\\"account-sidenav\\\">\\r\\n                <mat-card [perfectScrollbar]=\\\"psConfig\\\"> \\r\\n                    <button fxHide=\\\"false\\\" fxHide.gt-sm mat-mini-fab color=\\\"warn\\\" class=\\\"close\\\" (click)=\\\"sidenav.toggle()\\\">\\r\\n                        <mat-icon>close</mat-icon>\\r\\n                    </button>\\r\\n                    <mat-card-header fxLayoutAlign=\\\"start center\\\">                       \\r\\n                        <img mat-card-avatar src=\\\"assets/images/others/user.jpg\\\" alt=\\\"\\\">\\r\\n                        <mat-card-title class=\\\"text-muted mb-0\\\">Emilio Verdines</mat-card-title> \\r\\n                    </mat-card-header>\\r\\n                    <div class=\\\"divider my-3\\\"></div>\\r\\n                    <div *ngFor=\\\"let link of links\\\">\\r\\n                        <a matLine [routerLink]=\\\"link.href\\\" routerLinkActive=\\\"horizontal-active-link\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"p-3\\\">\\r\\n                            <mat-icon class=\\\"text-muted\\\">{{link.icon}}</mat-icon>\\r\\n                            <span class=\\\"mx-2\\\">{{ link.name }}</span>\\r\\n                        </a>\\r\\n                    </div>                      \\r\\n                  </mat-card>  \\r\\n            </mat-sidenav>\\r\\n            <mat-sidenav-content ngClass.gt-sm=\\\"distance\\\">\\r\\n              <mat-card *ngIf=\\\"!sidenavOpen\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between center\\\" class=\\\"text-muted mb-3\\\">\\r\\n                  <button mat-icon-button (click)=\\\"sidenav.toggle()\\\">\\r\\n                      <mat-icon>more_vert</mat-icon>\\r\\n                  </button>\\r\\n                  <h3> My Account</h3>\\r\\n              </mat-card>              \\r\\n              <mat-card class=\\\"account-wrapper\\\">\\r\\n                  <router-outlet></router-outlet>\\r\\n              </mat-card>  \\r\\n            </mat-sidenav-content>\\r\\n        </mat-sidenav-container>\\r\\n\\r\\n    </div>\\r\\n</div>\";","export default \"<p>\\r\\n  dashboard works!\\r\\n</p>\\r\\n\";","export default \"<mat-accordion [formGroup]=\\\"submitForm\\\" class=\\\"edit-property\\\">\\r\\n\\r\\n  <mat-expansion-panel [expanded]=\\\"step === 0\\\" (opened)=\\\"setStep(0)\\\" hideToggle>    \\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>Basic</mat-panel-title> \\r\\n    </mat-expansion-panel-header>\\r\\n    <form formGroupName=\\\"basic\\\" fxLayout=\\\"row wrap\\\">\\r\\n\\r\\n        <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n          <h1 class=\\\"fw-500 text-center\\\">Basic</h1>\\r\\n        </div>\\r\\n                \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Title</mat-label>\\r\\n              <input matInput placeholder=\\\"Title\\\" formControlName=\\\"title\\\" required autocomplete=\\\"off\\\">\\r\\n              <mat-error *ngIf=\\\"submitForm.get('basic')['controls'].title.errors?.required\\\">Title is required</mat-error>\\r\\n          </mat-form-field>\\r\\n        </div>  \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Description</mat-label> \\r\\n              <textarea matInput placeholder=\\\"Description\\\" formControlName=\\\"desc\\\" rows=\\\"7\\\"></textarea> \\r\\n          </mat-form-field> \\r\\n        </div> \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Price ($)</mat-label>\\r\\n              <input matInput placeholder=\\\"Enter sale or rent price\\\" formControlName=\\\"priceDollar\\\" autocomplete=\\\"off\\\"> \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Price (€)</mat-label>\\r\\n              <input matInput placeholder=\\\"Enter sale or rent price\\\" formControlName=\\\"priceEuro\\\" autocomplete=\\\"off\\\"> \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Property Type</mat-label> \\r\\n              <mat-select placeholder=\\\"Select Property Type\\\" formControlName=\\\"propertyType\\\" required>\\r\\n                  <mat-option *ngFor=\\\"let propertyType of propertyTypes\\\" [value]=\\\"propertyType\\\">\\r\\n                      {{propertyType.name}}\\r\\n                  </mat-option>\\r\\n              </mat-select>\\r\\n              <mat-error *ngIf=\\\"submitForm.get('basic')['controls'].propertyType.errors?.required\\\">Property Type is required</mat-error>                               \\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Property Status</mat-label>\\r\\n              <mat-select placeholder=\\\"Select Property Status\\\" formControlName=\\\"propertyStatus\\\" multiple>\\r\\n                  <mat-option *ngFor=\\\"let propertyStatus of propertyStatuses\\\" [value]=\\\"propertyStatus\\\">\\r\\n                      {{propertyStatus.name}}\\r\\n                  </mat-option>\\r\\n              </mat-select>                             \\r\\n          </mat-form-field>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"step-section pb-2\\\">\\r\\n            <p class=\\\"mb-0\\\"><span class=\\\"uppercase fw-500\\\">Gallery</span><span class=\\\"text-muted mx-3\\\">(max 8 images)</span></p>  \\r\\n            <input-file formControlName=\\\"gallery\\\" fileLimit=\\\"8\\\" fileAccept=\\\"image/*\\\" [linkEnabled]=\\\"true\\\"></input-file>  \\r\\n        </div> \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"end center\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"onSubmitForm('basic')\\\" type=\\\"submit\\\">\\r\\n            <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n            <mat-icon>navigate_next</mat-icon>\\r\\n          </button> \\r\\n        </div> \\r\\n    \\r\\n    </form> \\r\\n  </mat-expansion-panel>\\r\\n\\r\\n  <mat-expansion-panel [expanded]=\\\"step === 1\\\" (opened)=\\\"setStep(1)\\\" hideToggle [disabled]=\\\"!submitForm.get('basic').valid\\\">\\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>Address</mat-panel-title> \\r\\n    </mat-expansion-panel-header>\\r\\n    <form formGroupName=\\\"address\\\" fxLayout=\\\"row wrap\\\">\\r\\n            \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n          <h1 class=\\\"fw-500 text-center\\\">Address</h1>\\r\\n        </div>\\r\\n                  \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-icon matPrefix class=\\\"mr-1 text-muted\\\">location_on</mat-icon>\\r\\n              <mat-label>Location</mat-label>\\r\\n              <input matInput placeholder=\\\"Enter a location\\\" formControlName=\\\"location\\\" autocomplete=\\\"off\\\" #addressAutocomplete> \\r\\n              <button *ngIf=\\\"submitForm.get('address')['controls'].location.value\\\" mat-button matSuffix mat-icon-button (click)=\\\"submitForm.get('address')['controls'].location.setValue(null)\\\" type=\\\"button\\\">\\r\\n                <mat-icon>close</mat-icon>\\r\\n              </button>\\r\\n              <mat-error *ngIf=\\\"submitForm.get('address')['controls'].location.errors?.required\\\">Location is required</mat-error>   \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"px-2 mb-4\\\">\\r\\n            <agm-map [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [zoom]=\\\"zoom\\\" [mapTypeControl]=\\\"true\\\" [fullscreenControl]=\\\"true\\\" (mapClick)=\\\"onMapClick($event)\\\">\\r\\n                <agm-marker [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\" [markerDraggable]=\\\"true\\\" (markerClick)=\\\"onMarkerClick($event)\\\"></agm-marker>\\r\\n            </agm-map>\\r\\n        </div>\\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>City</mat-label>\\r\\n              <mat-select placeholder=\\\"Select City...\\\" formControlName=\\\"city\\\" (selectionChange)=\\\"onSelectCity()\\\" required> \\r\\n                <mat-option *ngFor=\\\"let city of cities\\\" [value]=\\\"city\\\">\\r\\n                  {{city.name}}\\r\\n                </mat-option>\\r\\n              </mat-select> \\r\\n              <mat-error *ngIf=\\\"submitForm.get('address')['controls'].city.errors?.required\\\">City is required</mat-error>                    \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Zip Code</mat-label>\\r\\n              <input matInput placeholder=\\\"exp. 98104\\\" autocomplete=\\\"off\\\" formControlName=\\\"zipCode\\\">                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n            <mat-label>Neighborhood</mat-label>\\r\\n            <mat-select placeholder=\\\"Select Neighborhood...\\\" formControlName=\\\"neighborhood\\\" multiple (selectionChange)=\\\"onSelectNeighborhood()\\\">\\r\\n              <mat-option *ngFor=\\\"let neighborhood of neighborhoods | filterNeighborhoods: submitForm.get('address')['controls'].city.value?.id\\\" [value]=\\\"neighborhood\\\">\\r\\n                {{neighborhood.name}}\\r\\n              </mat-option>\\r\\n            </mat-select>   \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n          <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n            <mat-label>Street</mat-label>\\r\\n            <mat-select placeholder=\\\"Select Street...\\\" formControlName=\\\"street\\\" multiple> \\r\\n              <mat-option *ngFor=\\\"let street of streets | filterStreets : { neighborhoods: submitForm.get('address')['controls'].neighborhood.value?.id, cityId:submitForm.get('address')['controls'].city.value?.id } \\\" [value]=\\\"street\\\">\\r\\n                {{street.name}}\\r\\n              </mat-option>\\r\\n            </mat-select>  \\r\\n          </mat-form-field>\\r\\n        </div> \\r\\n      \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"prevStep()\\\" type=\\\"button\\\">\\r\\n            <mat-icon>navigate_before</mat-icon>\\r\\n            <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n          </button>\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"onSubmitForm('address')\\\" type=\\\"submit\\\">\\r\\n            <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n            <mat-icon>navigate_next</mat-icon>\\r\\n          </button> \\r\\n        </div>  \\r\\n      \\r\\n    </form>    \\r\\n  </mat-expansion-panel>\\r\\n\\r\\n  <mat-expansion-panel [expanded]=\\\"step === 2\\\" (opened)=\\\"setStep(2)\\\" hideToggle [disabled]=\\\"!submitForm.get('basic').valid || !submitForm.get('address').valid\\\">\\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>Additional</mat-panel-title> \\r\\n    </mat-expansion-panel-header>\\r\\n    <form formGroupName=\\\"additional\\\" fxLayout=\\\"row wrap\\\">\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n          <h1 class=\\\"fw-500 text-center\\\">Additional</h1>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Bedrooms</mat-label>\\r\\n              <input matInput placeholder=\\\"bedrooms\\\" autocomplete=\\\"off\\\" formControlName=\\\"bedrooms\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Bathrooms</mat-label>\\r\\n              <input matInput placeholder=\\\"bathrooms\\\" autocomplete=\\\"off\\\" formControlName=\\\"bathrooms\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Garages</mat-label>\\r\\n              <input matInput placeholder=\\\"Garages\\\" autocomplete=\\\"off\\\" formControlName=\\\"garages\\\" onlyNumber maxlength=\\\"2\\\">                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Area (ft²)</mat-label>\\r\\n              <input matInput placeholder=\\\"Area\\\" autocomplete=\\\"off\\\" formControlName=\\\"area\\\" onlyNumber>                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n        \\r\\n        <div fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"50\\\" class=\\\"px-2\\\">\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Year Built</mat-label>\\r\\n              <input matInput placeholder=\\\"Year Built\\\" autocomplete=\\\"off\\\" formControlName=\\\"yearBuilt\\\" onlyNumber  maxlength=\\\"4\\\">                  \\r\\n            </mat-form-field>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"mb-2\\\"> \\r\\n            <p class=\\\"uppercase m-2 fw-500\\\">Features</p> \\r\\n            <div formArrayName=\\\"features\\\" fxLayout=\\\"row wrap\\\">\\r\\n                <div [formGroupName]=\\\"i\\\" *ngFor=\\\"let control of submitForm.get('additional')['controls'].features['controls']; index as i\\\" class=\\\"p-2\\\">\\r\\n                    <mat-checkbox formControlName=\\\"selected\\\">{{features[i].name}}</mat-checkbox>                         \\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    \\r\\n\\r\\n        <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"prevStep()\\\" type=\\\"button\\\">\\r\\n            <mat-icon>navigate_before</mat-icon>\\r\\n            <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n          </button>\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"onSubmitForm('additional')\\\" type=\\\"submit\\\">\\r\\n            <span class=\\\"mx-1 uppercase\\\">Next</span>                    \\r\\n            <mat-icon>navigate_next</mat-icon>\\r\\n          </button> \\r\\n        </div>  \\r\\n    \\r\\n        \\r\\n    \\r\\n    \\r\\n    </form>\\r\\n  </mat-expansion-panel> \\r\\n\\r\\n  <mat-expansion-panel [expanded]=\\\"step === 3\\\" (opened)=\\\"setStep(3)\\\" hideToggle [disabled]=\\\"!submitForm.get('basic').valid || !submitForm.get('address').valid || !submitForm.get('additional').valid \\\">\\r\\n    <mat-expansion-panel-header>\\r\\n      <mat-panel-title>Media</mat-panel-title> \\r\\n    </mat-expansion-panel-header>\\r\\n    <form formGroupName=\\\"media\\\" fxLayout=\\\"row wrap\\\">    \\r\\n                  \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"p-3\\\">\\r\\n          <h1 class=\\\"fw-500 text-center\\\">Media</h1>\\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n            <p class=\\\"mb-0\\\"><span class=\\\"uppercase fw-500\\\">Videos</span><span class=\\\"text-muted mx-3\\\">(video link to .mp4)</span></p>                            \\r\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addVideo()\\\" matTooltip=\\\"Add New Video\\\" matTooltipPosition=\\\"after\\\">\\r\\n                <mat-icon>add_circle</mat-icon>\\r\\n            </button>\\r\\n        </div> \\r\\n        <div formArrayName=\\\"videos\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n            <div *ngFor=\\\"let item of submitForm.get('media')['controls'].videos['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section\\\">\\r\\n                <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Name</mat-label>\\r\\n                        <input matInput placeholder=\\\"Video name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Link</mat-label>\\r\\n                        <input matInput placeholder=\\\"Link to video\\\" formControlName=\\\"link\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field>                                                 \\r\\n                </div>\\r\\n                <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                    <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteVideo(i)\\\" matTooltip=\\\"Delete Video\\\">\\r\\n                        <mat-icon>cancel</mat-icon>\\r\\n                    </button>\\r\\n                </div>                            \\r\\n            </div>        \\r\\n        </div>\\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n            <p class=\\\"uppercase fw-500 mb-0\\\">Plans</p>                            \\r\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addPlan()\\\" matTooltip=\\\"Add New Plan\\\" matTooltipPosition=\\\"after\\\" class=\\\"mx-3\\\">\\r\\n                <mat-icon>add_circle</mat-icon>\\r\\n            </button>\\r\\n        </div> \\r\\n        <div formArrayName=\\\"plans\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n            <div *ngFor=\\\"let item of submitForm.get('media')['controls'].plans['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section pb-2\\\">\\r\\n                <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Name</mat-label>\\r\\n                        <input matInput placeholder=\\\"Plan name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Desc</mat-label>\\r\\n                        <input matInput placeholder=\\\"Description\\\" formControlName=\\\"desc\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field> \\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Area (ft²)</mat-label>\\r\\n                        <input matInput placeholder=\\\"Area\\\" formControlName=\\\"area\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Rooms</mat-label>\\r\\n                        <input matInput placeholder=\\\"Rooms\\\" formControlName=\\\"rooms\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"33.3\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Baths</mat-label>\\r\\n                        <input matInput placeholder=\\\"Baths\\\" formControlName=\\\"baths\\\" autocomplete=\\\"off\\\" onlyNumber>     \\r\\n                    </mat-form-field>\\r\\n                    <div fxFlex=\\\"100\\\" class=\\\"px-2\\\">  \\r\\n                        <input-file placeholder=\\\"Image (or link to image)\\\" formControlName=\\\"image\\\" fileLimit=\\\"1\\\" fileAccept=\\\"image/*\\\" [linkEnabled]=\\\"true\\\"></input-file>  \\r\\n                    </div>                \\r\\n                </div>\\r\\n                <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                    <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deletePlan(i)\\\" matTooltip=\\\"Delete Plan\\\">\\r\\n                        <mat-icon>cancel</mat-icon>\\r\\n                    </button>\\r\\n                </div>  \\r\\n            </div>        \\r\\n        </div> \\r\\n    \\r\\n        \\r\\n        <div fxFlex=\\\"100\\\" fxLayoutAlign=\\\"start center\\\" class=\\\"my-3 px-2\\\"> \\r\\n            <p class=\\\"mb-0 uppercase fw-500\\\">Additional features</p>                            \\r\\n            <button type=\\\"button\\\" mat-icon-button color=\\\"primary\\\" (click)=\\\"addFeature()\\\" matTooltip=\\\"Add New Feature\\\" matTooltipPosition=\\\"after\\\">\\r\\n                <mat-icon>add_circle</mat-icon>\\r\\n            </button>\\r\\n        </div> \\r\\n        <div formArrayName=\\\"additionalFeatures\\\" fxFlex=\\\"100\\\" fxLayout=\\\"row wrap\\\">  \\r\\n            <div *ngFor=\\\"let item of submitForm.get('media')['controls'].additionalFeatures['controls']; let i = index;\\\" fxFlex=\\\"100\\\" class=\\\"step-section\\\">\\r\\n                <div fxFlex=\\\"4\\\" class=\\\"fw-500 text-center pt-3\\\">{{i+1}}.</div>\\r\\n                <div [formGroupName]=\\\"i\\\" fxFlex=\\\"90\\\" fxLayout=\\\"row wrap\\\">\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"40\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Name</mat-label>\\r\\n                        <input matInput placeholder=\\\"Feature name\\\" formControlName=\\\"name\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field>\\r\\n                    <mat-form-field appearance=\\\"outline\\\" fxFlex=\\\"100\\\" fxFlex.gt-xs=\\\"60\\\" class=\\\"px-2\\\">\\r\\n                        <mat-label>Value</mat-label>\\r\\n                        <input matInput placeholder=\\\"Feature value\\\" formControlName=\\\"value\\\" autocomplete=\\\"off\\\">     \\r\\n                    </mat-form-field>                                                 \\r\\n                </div>\\r\\n                <div fxFlex=\\\"6\\\" class=\\\"text-center pt-2\\\">\\r\\n                    <button mat-icon-button color=\\\"warn\\\" (click)=\\\"deleteFeature(i)\\\" matTooltip=\\\"Delete Feature\\\">\\r\\n                        <mat-icon>cancel</mat-icon>\\r\\n                    </button>\\r\\n                </div>                            \\r\\n            </div>        \\r\\n        </div>    \\r\\n    \\r\\n        <div fxFlex=\\\"100\\\" class=\\\"py-3\\\">\\r\\n            <mat-slide-toggle formControlName=\\\"featured\\\">Featured</mat-slide-toggle>\\r\\n        </div>\\r\\n\\r\\n        <div fxFlex=\\\"100\\\" class=\\\"mt-3 p-2\\\" fxLayoutAlign=\\\"space-between center\\\">\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"prevStep()\\\" type=\\\"button\\\">\\r\\n            <mat-icon>navigate_before</mat-icon>\\r\\n            <span class=\\\"mx-1 uppercase\\\">Back</span>  \\r\\n          </button>\\r\\n          <button mat-raised-button color=\\\"primary\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" (click)=\\\"onSubmitForm('media')\\\" type=\\\"submit\\\">\\r\\n            <span class=\\\"mx-1 uppercase\\\">Update</span>\\r\\n          </button> \\r\\n        </div>\\r\\n    \\r\\n    </form>\\r\\n  </mat-expansion-panel> \\r\\n\\r\\n</mat-accordion> \\r\\n\\r\\n<div *ngIf=\\\"step === 4\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\" class=\\\"pt-3\\\">  \\r\\n  <a routerLink=\\\"/account/my-properties\\\" mat-raised-button color=\\\"accent\\\">Return to my properties</a>       \\r\\n</div> \";","export default \"<mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter properties\\\" autocomplete=\\\"off\\\">\\r\\n</mat-form-field> \\r\\n<div class=\\\"table-wrapper\\\"> \\r\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"w-100\\\">\\r\\n  \\r\\n      <!-- ID Column -->\\r\\n      <ng-container matColumnDef=\\\"id\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"> {{property.id}} </td>\\r\\n      </ng-container>  \\r\\n\\r\\n      <!-- Image Column -->\\r\\n      <ng-container matColumnDef=\\\"image\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Image </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"><img [src]=\\\"property.gallery[0].small\\\" [style.width.px]=\\\"100\\\" class=\\\"d-block\\\"></td>\\r\\n      </ng-container> \\r\\n  \\r\\n      <!-- Title Column -->\\r\\n      <ng-container matColumnDef=\\\"title\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Title </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"><a [routerLink]=\\\"['/properties', property.id ]\\\" class=\\\"property-name\\\">{{property.title}}</a></td>\\r\\n      </ng-container>  \\r\\n\\r\\n      <!-- Actions Column -->\\r\\n      <ng-container matColumnDef=\\\"actions\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Remove </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"> \\r\\n            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"remove(property)\\\" matTooltip=\\\"Remove\\\" class=\\\"remove\\\">\\r\\n                <mat-icon>delete</mat-icon>\\r\\n            </button> \\r\\n        </td>\\r\\n      </ng-container> \\r\\n  \\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let property; columns: displayedColumns;\\\">\\r\\n      </tr>\\r\\n    </table> \\r\\n    <p *ngIf=\\\"dataSource?.data.length === 0\\\" class=\\\"py-5 mb-0 text-center\\\">No data available</p> \\r\\n</div>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\"></mat-paginator>\";","export default \"<mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter properties\\\" autocomplete=\\\"off\\\">\\r\\n</mat-form-field>\\r\\n<div class=\\\"table-wrapper\\\"> \\r\\n    <table mat-table [dataSource]=\\\"dataSource\\\" matSort class=\\\"w-100\\\">\\r\\n  \\r\\n      <!-- ID Column -->\\r\\n      <ng-container matColumnDef=\\\"id\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> ID </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"> {{property.id}} </td>\\r\\n      </ng-container>  \\r\\n\\r\\n      <!-- Image Column -->\\r\\n      <ng-container matColumnDef=\\\"image\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Image </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"><img [src]=\\\"property.gallery[0].small\\\" [style.width.px]=\\\"100\\\" class=\\\"d-block\\\"></td>\\r\\n      </ng-container> \\r\\n  \\r\\n      <!-- Title Column -->\\r\\n      <ng-container matColumnDef=\\\"title\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Title </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"><a [routerLink]=\\\"['/properties', property.id ]\\\" class=\\\"property-name\\\">{{property.title}}</a></td>\\r\\n      </ng-container> \\r\\n\\r\\n      <!-- Published Column -->\\r\\n      <ng-container matColumnDef=\\\"published\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Published </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"> {{property.published | date:\\\"dd MMMM, yyyy\\\"}} </td>\\r\\n      </ng-container> \\r\\n\\r\\n      <!-- Views Column -->\\r\\n      <ng-container matColumnDef=\\\"views\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef mat-sort-header> Views </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\"> {{property.views}} </td>\\r\\n      </ng-container> \\r\\n\\r\\n      <!-- Actions Column -->\\r\\n      <ng-container matColumnDef=\\\"actions\\\">\\r\\n        <th mat-header-cell *matHeaderCellDef> Actions </th>\\r\\n        <td mat-cell *matCellDef=\\\"let property\\\">  \\r\\n            <a [routerLink]=\\\"['/account/my-properties', property.id]\\\"mat-icon-button color=\\\"primary\\\" matTooltip=\\\"Edit property\\\">\\r\\n                <mat-icon>edit</mat-icon>\\r\\n            </a>\\r\\n            <button mat-icon-button color=\\\"warn\\\" (click)=\\\"remove(property)\\\" matTooltip=\\\"Remove\\\" class=\\\"remove\\\">\\r\\n                <mat-icon>delete</mat-icon>\\r\\n            </button> \\r\\n        </td>\\r\\n      </ng-container> \\r\\n  \\r\\n      <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n      <tr mat-row *matRowDef=\\\"let property; columns: displayedColumns;\\\">\\r\\n      </tr>\\r\\n    </table> \\r\\n    <p *ngIf=\\\"dataSource?.data.length === 0\\\" class=\\\"py-5 mb-0 text-center\\\">No data available</p> \\r\\n</div>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 25, 100]\\\" showFirstLastButtons></mat-paginator>\";","export default \"<div fxLayout=\\\"row wrap\\\">\\r\\n    <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\">\\r\\n        <h2 class=\\\"text-muted text-center fw-600 mb-3\\\">Account details</h2>\\r\\n        <form [formGroup]=\\\"infoForm\\\" (ngSubmit)=\\\"onInfoFormSubmit(infoForm.value)\\\"> \\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Name</mat-label>\\r\\n                <input matInput placeholder=\\\"Name\\\" formControlName=\\\"name\\\" required autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"infoForm.controls.name.errors?.required\\\">Name is required</mat-error>\\r\\n                <mat-error *ngIf=\\\"infoForm.controls.name.hasError('minlength')\\\">Name isn't long enough, minimum of 3 characters</mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Email</mat-label>\\r\\n                <input matInput placeholder=\\\"Email\\\" formControlName=\\\"email\\\" required autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"infoForm.controls.email.errors?.required\\\">Email is required</mat-error>\\r\\n                <mat-error *ngIf=\\\"infoForm.controls.email.hasError('invalidEmail')\\\">Invalid email address</mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Phone</mat-label>\\r\\n                <input matInput placeholder=\\\"Phone\\\" formControlName=\\\"phone\\\" required onlyNumber autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"infoForm.controls.phone.errors?.required\\\">Phone is required</mat-error>\\r\\n            </mat-form-field>\\r\\n\\r\\n            <div class=\\\"mb-3\\\">\\r\\n                <input-file placeholder=\\\"Image (or link to image)\\\" formControlName=\\\"image\\\" fileLimit=\\\"1\\\" fileAccept=\\\"image/*\\\" [linkEnabled]=\\\"true\\\"></input-file>  \\r\\n            </div>\\r\\n    \\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Organization</mat-label>\\r\\n                <input matInput placeholder=\\\"organization\\\" formControlName=\\\"organization\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Facebook</mat-label>\\r\\n                <input matInput placeholder=\\\"facebook\\\" formControlName=\\\"facebook\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Twitter</mat-label>\\r\\n                <input matInput placeholder=\\\"twitter\\\" formControlName=\\\"twitter\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Linkedin</mat-label>\\r\\n                <input matInput placeholder=\\\"linkedin\\\" formControlName=\\\"linkedin\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Instagram</mat-label>\\r\\n                <input matInput placeholder=\\\"instagram\\\" formControlName=\\\"instagram\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Website</mat-label>\\r\\n                <input matInput placeholder=\\\"website\\\" formControlName=\\\"website\\\" autocomplete=\\\"off\\\"> \\r\\n            </mat-form-field>\\r\\n\\r\\n            <div class=\\\"text-center mt-2\\\">\\r\\n                <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"uppercase\\\">Update profile</button>\\r\\n            </div> \\r\\n        </form>\\r\\n    </div>\\r\\n    \\r\\n    <div fxFlex=\\\"100\\\" fxFlex.gt-sm=\\\"50\\\" class=\\\"p-3\\\" ngClass.sm=\\\"mt-2\\\" ngClass.xs=\\\"mt-2\\\">\\r\\n        <h2 class=\\\"text-muted text-center fw-600 mb-3\\\">Password change</h2>\\r\\n        <form [formGroup]=\\\"passwordForm\\\" (ngSubmit)=\\\"onPasswordFormSubmit(passwordForm.value)\\\">            \\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>Current Password</mat-label>\\r\\n                <input matInput placeholder=\\\"Current Password\\\" formControlName=\\\"currentPassword\\\" type=\\\"password\\\" minlength=\\\"6\\\" required autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"passwordForm.controls.currentPassword.errors?.required\\\">Current Password is required</mat-error>\\r\\n                <mat-error *ngIf=\\\"passwordForm.controls.currentPassword.hasError('minlength')\\\">Current Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n            </mat-form-field>\\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n                <mat-label>New Password</mat-label>\\r\\n                <input matInput placeholder=\\\"New Password\\\" formControlName=\\\"newPassword\\\" type=\\\"password\\\" minlength=\\\"6\\\" required autocomplete=\\\"off\\\">\\r\\n                <mat-error *ngIf=\\\"passwordForm.controls.newPassword.errors?.required\\\">New Password is required</mat-error>\\r\\n                <mat-error *ngIf=\\\"passwordForm.controls.newPassword.hasError('minlength')\\\">New Password isn't long enough, minimum of 6 characters</mat-error>\\r\\n            </mat-form-field> \\r\\n            <mat-form-field appearance=\\\"outline\\\" class=\\\"w-100\\\">\\r\\n              <mat-label>Confirm New Password</mat-label>\\r\\n              <input matInput placeholder=\\\"Confirm New Password\\\" formControlName=\\\"confirmNewPassword\\\" type=\\\"password\\\" required autocomplete=\\\"off\\\">\\r\\n              <mat-error *ngIf=\\\"passwordForm.controls.confirmNewPassword.errors?.required\\\">Confirm New Password is required</mat-error>\\r\\n              <mat-error *ngIf=\\\"passwordForm.controls.confirmNewPassword.hasError('mismatchedPasswords')\\\">Passwords do not match</mat-error>\\r\\n            </mat-form-field>\\r\\n            <div class=\\\"text-center mt-2\\\">\\r\\n                <button mat-raised-button color=\\\"primary\\\" type=\\\"submit\\\" class=\\\"uppercase\\\">Change password</button>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div> \\r\\n\";","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjY291bnQvYWNjb3VudC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ViewChild, HostListener } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\nimport { PerfectScrollbarConfigInterface } from 'ngx-perfect-scrollbar';\r\n\r\n@Component({\r\n  selector: 'app-account',\r\n  templateUrl: './account.component.html',\r\n  styleUrls: ['./account.component.scss']\r\n})\r\nexport class AccountComponent implements OnInit {\r\n  public psConfig: PerfectScrollbarConfigInterface = {\r\n    wheelPropagation:true\r\n  };\r\n  @ViewChild('sidenav') sidenav: any;\r\n  public sidenavOpen:boolean = true;\r\n  public links = [ \r\n    { name: 'Profile', href: 'profile', icon: 'person' },  \r\n    { name: 'My Properties', href: 'my-properties', icon: 'view_list' },\r\n    { name: 'Favorites', href: 'favorites', icon: 'favorite' }, \r\n    { name: 'Submit Property', href: '/submit-property', icon: 'add_circle' },  \r\n    { name: 'Logout', href: '/login', icon: 'power_settings_new' },    \r\n  ]; \r\n  constructor(public router:Router) { }\r\n\r\n  ngOnInit() {\r\n    if(window.innerWidth < 960){\r\n      this.sidenavOpen = false;\r\n    };\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  public onWindowResize():void {\r\n    (window.innerWidth < 960) ? this.sidenavOpen = false : this.sidenavOpen = true;\r\n  }\r\n\r\n  ngAfterViewInit(){\r\n    this.router.events.subscribe(event => {\r\n      if (event instanceof NavigationEnd) {  \r\n        if(window.innerWidth < 960){\r\n          this.sidenav.close(); \r\n        }\r\n      }                \r\n    });\r\n  } \r\n\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { SharedModule } from '../../shared/shared.module';\r\nimport { InputFileModule } from 'ngx-input-file';\r\nimport { AgmCoreModule } from '@agm/core';  \r\nimport { AccountComponent } from './account.component';\r\nimport { DashboardComponent } from './dashboard/dashboard.component'; \r\nimport { MyPropertiesComponent } from './my-properties/my-properties.component';\r\nimport { FavoritesComponent } from './favorites/favorites.component';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { EditPropertyComponent } from './edit-property/edit-property.component';\r\n\r\nexport const routes = [\r\n  { \r\n    path: '', \r\n    component: AccountComponent, children: [\r\n      { path: '', redirectTo: 'profile', pathMatch: 'full' }, \r\n      { path: 'my-properties', component: MyPropertiesComponent },\r\n      { path: 'my-properties/:id', component: EditPropertyComponent },\r\n      { path: 'favorites', component: FavoritesComponent },\r\n      { path: 'profile', component: ProfileComponent }\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DashboardComponent,\r\n    AccountComponent,  \r\n    MyPropertiesComponent, \r\n    FavoritesComponent, \r\n    ProfileComponent, \r\n    EditPropertyComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule,\r\n    InputFileModule,\r\n    AgmCoreModule\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjY291bnQvZGFzaGJvYXJkL2Rhc2hib2FyZC5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss']\r\n})\r\nexport class DashboardComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \".edit-property .sebm-google-map-container {\\n  height: 400px;\\n}\\n.edit-property .step-section {\\n  padding: 20px 10px 0;\\n  border-radius: 4px;\\n  margin: 8px 8px 16px;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvcGFnZXMvYWNjb3VudC9lZGl0LXByb3BlcnR5L2VkaXQtcHJvcGVydHkuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDSSxhQUFBO0FBQVI7QUFFSTtFQUNJLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSxvQkFBQTtBQUFSIiwiZmlsZSI6InNyYy9hcHAvcGFnZXMvYWNjb3VudC9lZGl0LXByb3BlcnR5L2VkaXQtcHJvcGVydHkuY29tcG9uZW50LnNjc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZWRpdC1wcm9wZXJ0eSB7IFxyXG4gICAgLnNlYm0tZ29vZ2xlLW1hcC1jb250YWluZXIge1xyXG4gICAgICAgIGhlaWdodDogNDAwcHg7XHJcbiAgICB9IFxyXG4gICAgLnN0ZXAtc2VjdGlvbiB7XHJcbiAgICAgICAgcGFkZGluZzogMjBweCAxMHB4IDA7XHJcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgICAgIG1hcmdpbjogOHB4IDhweCAxNnB4O1xyXG4gICAgfVxyXG59Il19 */\";","import { Component, OnInit, ViewChild, ElementRef, NgZone } from '@angular/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { FormGroup, FormBuilder, Validators, FormArray } from '@angular/forms';\r\nimport { MapsAPILoader } from '@agm/core';\r\nimport { Property } from 'src/app/app.models';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-edit-property',\r\n  templateUrl: './edit-property.component.html',\r\n  styleUrls: ['./edit-property.component.scss']\r\n})\r\nexport class EditPropertyComponent implements OnInit {\r\n  @ViewChild('addressAutocomplete') addressAutocomplete: ElementRef;\r\n  private sub: any;\r\n  public property:Property;\r\n  public submitForm:FormGroup;\r\n  public features = [];\r\n  public propertyTypes = [];\r\n  public propertyStatuses = [];\r\n  public cities = [];\r\n  public neighborhoods = [];\r\n  public streets = [];\r\n  public lat: number = 40.678178;\r\n  public lng: number = -73.944158;\r\n  public zoom: number = 12; \r\n  constructor(public appService:AppService, \r\n              private activatedRoute: ActivatedRoute,\r\n              private fb: FormBuilder,\r\n              private mapsAPILoader: MapsAPILoader, \r\n              private ngZone: NgZone,\r\n              private snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit() {\r\n    this.features = this.appService.getFeatures();\r\n    this.propertyTypes = this.appService.getPropertyTypes();\r\n    this.propertyStatuses = this.appService.getPropertyStatuses();\r\n    this.cities = this.appService.getCities();\r\n    this.neighborhoods = this.appService.getNeighborhoods();\r\n    this.streets = this.appService.getStreets();   \r\n\r\n    this.submitForm = this.fb.group({\r\n      basic: this.fb.group({\r\n        title: [null, Validators.required],\r\n        desc: null,\r\n        priceDollar: null,\r\n        priceEuro: null,\r\n        propertyType: [null, Validators.required],\r\n        propertyStatus: null, \r\n        gallery: null\r\n      }),\r\n      address: this.fb.group({\r\n        location: ['', Validators.required],\r\n        city: ['', Validators.required],\r\n        zipCode: '',\r\n        neighborhood: '',\r\n        street: ''\r\n      }),\r\n      additional: this.fb.group({\r\n        bedrooms: '',\r\n        bathrooms: '',\r\n        garages: '',\r\n        area: '',\r\n        yearBuilt: '',\r\n        features: this.buildFeatures()\r\n      }),\r\n      media: this.fb.group({\r\n        videos: this.fb.array([ this.createVideo() ]),\r\n        plans: this.fb.array([ this.createPlan() ]), \r\n        additionalFeatures: this.fb.array([ this.createFeature() ]),\r\n        featured: false\r\n      })\r\n    }); \r\n \r\n    this.placesAutocomplete();\r\n    \r\n    this.sub = this.activatedRoute.params.subscribe(params => {   \r\n      this.getPropertyById(params['id']); \r\n    });\r\n\r\n  }\r\n  ngOnDestroy() {\r\n    this.sub.unsubscribe();\r\n  } \r\n\r\n  public getPropertyById(id){\r\n    this.appService.getPropertyById(id).subscribe(data=>{\r\n      console.log(data)\r\n      this.property = data;\r\n\r\n      this.submitForm.controls.basic.get('title').setValue(this.property.title);\r\n      this.submitForm.controls.basic.get('desc').setValue(this.property.desc);\r\n      this.submitForm.controls.basic.get('priceDollar').setValue((this.property.priceDollar.sale)?this.property.priceDollar.sale:this.property.priceDollar.rent);\r\n      this.submitForm.controls.basic.get('priceEuro').setValue((this.property.priceEuro.sale)?this.property.priceEuro.sale:this.property.priceEuro.rent);\r\n      this.submitForm.controls.basic.get('propertyType').setValue( this.propertyTypes.filter(p => p.name == this.property.propertyType)[0]);\r\n      \r\n      const statusList: any[] = []; \r\n      this.propertyStatuses.forEach(status =>{\r\n        this.property.propertyStatus.forEach(name=>{\r\n          if(status.name == name){\r\n            statusList.push(status);\r\n          }\r\n        })       \r\n      })\r\n      this.submitForm.controls.basic.get('propertyStatus').setValue(statusList);\r\n\r\n      const images: any[] = [];\r\n      this.property.gallery.forEach(item=>{\r\n        let image = {\r\n          link: item.medium,\r\n          preview: item.medium\r\n        }\r\n        images.push(image);\r\n      })\r\n      this.submitForm.controls.basic.get('gallery').setValue(images);\r\n\r\n      this.submitForm.controls.address.get('location').setValue(this.property.formattedAddress);  \r\n      this.lat = this.property.location.lat;\r\n      this.lng = this.property.location.lng; \r\n      this.getAddress();\r\n       \r\n      this.submitForm.controls.additional.get('bedrooms').setValue(this.property.bedrooms);  \r\n      this.submitForm.controls.additional.get('bathrooms').setValue(this.property.bathrooms);  \r\n      this.submitForm.controls.additional.get('garages').setValue(this.property.garages);  \r\n      this.submitForm.controls.additional.get('area').setValue(this.property.area.value);\r\n      this.submitForm.controls.additional.get('yearBuilt').setValue(this.property.yearBuilt);\r\n      this.features.forEach(feature =>{\r\n        this.property.features.forEach(name=>{\r\n          if(feature.name == name){\r\n            feature.selected = true;\r\n          }\r\n        })       \r\n      })\r\n      this.submitForm.controls.additional.get('features').setValue(this.features);\r\n\r\n      \r\n      const videos = this.submitForm.controls.media.get('videos') as FormArray;\r\n      while (videos.length) {\r\n        videos.removeAt(0);\r\n      }\r\n      this.property.videos.forEach(video => videos.push(this.fb.group(video)));\r\n\r\n      const plans = this.submitForm.controls.media.get('plans') as FormArray;\r\n      while (plans.length) {\r\n        plans.removeAt(0);\r\n      }     \r\n      this.property.plans.forEach(plan => {      \r\n        let p = {\r\n          id: plan.id,\r\n          name: plan.name, \r\n          desc: plan.desc,\r\n          area: plan.area.value,\r\n          rooms: plan.rooms,\r\n          baths: plan.baths, \r\n          image: null \r\n        }\r\n        plans.push(this.fb.group(p))        \r\n      }); \r\n      this.property.plans.forEach((plan, index) => { \r\n        let image = {\r\n          link: plan.image,\r\n          preview: plan.image\r\n        }\r\n        this.submitForm.controls.media.get('plans')['controls'][index].controls.image.setValue([image]);\r\n      })\r\n        \r\n      const additionalFeatures = this.submitForm.controls.media.get('additionalFeatures') as FormArray;\r\n      while (additionalFeatures.length) {\r\n        additionalFeatures.removeAt(0);\r\n      }\r\n      this.property.additionalFeatures.forEach(feature => additionalFeatures.push(this.fb.group(feature)));\r\n\r\n      this.submitForm.controls.media.get('featured').setValue(this.property.featured);         \r\n       \r\n    });\r\n  }\r\n\r\n\r\n\r\n  \r\n  // -------------------- Address ---------------------------  \r\n  public onSelectCity(){\r\n    this.submitForm.controls.address.get('neighborhood').setValue(null, {emitEvent: false});\r\n    this.submitForm.controls.address.get('street').setValue(null, {emitEvent: false});\r\n  }\r\n  public onSelectNeighborhood(){\r\n    this.submitForm.controls.address.get('street').setValue(null, {emitEvent: false}); \r\n  }\r\n\r\n  private setCurrentPosition() {\r\n    if(\"geolocation\" in navigator) {\r\n      navigator.geolocation.getCurrentPosition((position) => { \r\n        this.lat = position.coords.latitude;\r\n        this.lng = position.coords.longitude; \r\n      });\r\n    }\r\n  }\r\n  private placesAutocomplete(){ \r\n    this.mapsAPILoader.load().then(() => {\r\n      let autocomplete = new google.maps.places.Autocomplete(this.addressAutocomplete.nativeElement, {\r\n        types: [\"address\"]\r\n      });\r\n      autocomplete.addListener(\"place_changed\", () => {\r\n        this.ngZone.run(() => { \r\n          let place: google.maps.places.PlaceResult = autocomplete.getPlace(); \r\n          if (place.geometry === undefined || place.geometry === null) {\r\n            return;\r\n          };\r\n          this.lat = place.geometry.location.lat();\r\n          this.lng = place.geometry.location.lng(); \r\n          this.getAddress();\r\n        });\r\n      });\r\n    });\r\n  } \r\n  \r\n   \r\n  public getAddress(){    \r\n    this.appService.getAddress(this.lat, this.lng).subscribe(response => { \r\n      let address = response['results'][0].formatted_address; \r\n      this.submitForm.controls.address.get('location').setValue(address); \r\n      this.setAddresses(response['results'][0]); \r\n    })\r\n  }\r\n  public onMapClick(e:any){\r\n    this.lat = e.coords.lat;\r\n    this.lng = e.coords.lng; \r\n    this.getAddress();\r\n  }\r\n  public onMarkerClick(e:any){\r\n    console.log(e);\r\n  }\r\n  \r\n  public setAddresses(result){\r\n    this.submitForm.controls.address.get('city').setValue(null);\r\n    this.submitForm.controls.address.get('zipCode').setValue(null);\r\n    this.submitForm.controls.address.get('street').setValue(null); \r\n\r\n    var newCity, newStreet, newNeighborhood;\r\n    \r\n    result.address_components.forEach(item =>{\r\n      if(item.types.indexOf('locality') > -1){  \r\n        if(this.cities.filter(city => city.name == item.long_name)[0]){\r\n          newCity = this.cities.filter(city => city.name == item.long_name)[0];\r\n        }\r\n        else{\r\n          newCity = { id: this.cities.length+1, name: item.long_name };\r\n          this.cities.push(newCity); \r\n        }\r\n        this.submitForm.controls.address.get('city').setValue(newCity);    \r\n      }\r\n      if(item.types.indexOf('postal_code') > -1){ \r\n        this.submitForm.controls.address.get('zipCode').setValue(item.long_name);\r\n      }\r\n    });\r\n\r\n    if(!newCity){\r\n      result.address_components.forEach(item =>{\r\n        if(item.types.indexOf('administrative_area_level_1') > -1){  \r\n          if(this.cities.filter(city => city.name == item.long_name)[0]){\r\n            newCity = this.cities.filter(city => city.name == item.long_name)[0];\r\n          }\r\n          else{\r\n            newCity = { \r\n              id: this.cities.length+1, \r\n              name: item.long_name \r\n            };\r\n            this.cities.push(newCity); \r\n          }\r\n          this.submitForm.controls.address.get('city').setValue(newCity);    \r\n        } \r\n      });\r\n    }\r\n\r\n    if(newCity){\r\n      result.address_components.forEach(item =>{ \r\n        if(item.types.indexOf('neighborhood') > -1){ \r\n          let neighborhood = this.neighborhoods.filter(n => n.name == item.long_name && n.cityId == newCity.id)[0];\r\n          if(neighborhood){\r\n            newNeighborhood = neighborhood;\r\n          }\r\n          else{\r\n            newNeighborhood = { \r\n              id: this.neighborhoods.length+1, \r\n              name: item.long_name, \r\n              cityId: newCity.id \r\n            };\r\n            this.neighborhoods.push(newNeighborhood);\r\n          }\r\n          this.neighborhoods = [...this.neighborhoods];\r\n          this.submitForm.controls.address.get('neighborhood').setValue([newNeighborhood]); \r\n        }  \r\n      })\r\n    }\r\n\r\n    if(newCity){\r\n      result.address_components.forEach(item =>{            \r\n        if(item.types.indexOf('route') > -1){ \r\n          if(this.streets.filter(street => street.name == item.long_name && street.cityId == newCity.id)[0]){\r\n            newStreet = this.streets.filter(street => street.name == item.long_name && street.cityId == newCity.id)[0];\r\n          }\r\n          else{\r\n            newStreet = { \r\n              id: this.streets.length+1, \r\n              name: item.long_name, \r\n              cityId: newCity.id, \r\n              neighborhoodId: (newNeighborhood) ? newNeighborhood.id : null \r\n            };\r\n            this.streets.push(newStreet);\r\n          }          \r\n          this.streets = [...this.streets];\r\n          this.submitForm.controls.address.get('street').setValue([newStreet]); \r\n        }\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  // -------------------- Additional ---------------------------  \r\n  public buildFeatures() {\r\n    const arr = this.features.map(feature => { \r\n      return this.fb.group({\r\n        id: feature.id,\r\n        name: feature.name,\r\n        selected: feature.selected\r\n      });\r\n    })   \r\n    return this.fb.array(arr);\r\n  }\r\n  \r\n\r\n  \r\n  // -------------------- Media --------------------------- \r\n  public createVideo(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      link: null \r\n    });\r\n  }\r\n  public addVideo(): void {\r\n    const videos = this.submitForm.controls.media.get('videos') as FormArray;\r\n    videos.push(this.createVideo());\r\n  }\r\n  public deleteVideo(index) {\r\n    const videos = this.submitForm.controls.media.get('videos') as FormArray;\r\n    videos.removeAt(index);\r\n  }\r\n  \r\n  public createPlan(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      desc: null,\r\n      area: null,\r\n      rooms: null,\r\n      baths: null,\r\n      image: null\r\n    });\r\n  }\r\n  public addPlan(): void {\r\n    const plans = this.submitForm.controls.media.get('plans') as FormArray;\r\n    plans.push(this.createPlan());\r\n  }\r\n  public deletePlan(index) {\r\n    const plans = this.submitForm.controls.media.get('plans') as FormArray;\r\n    plans.removeAt(index);\r\n  } \r\n\r\n\r\n  public createFeature(): FormGroup {\r\n    return this.fb.group({\r\n      id: null,\r\n      name: null, \r\n      value: null \r\n    });\r\n  }\r\n  public addFeature(): void {\r\n    const features = this.submitForm.controls.media.get('additionalFeatures') as FormArray;\r\n    features.push(this.createFeature());\r\n  }\r\n  public deleteFeature(index) {\r\n    const features = this.submitForm.controls.media.get('additionalFeatures') as FormArray;\r\n    features.removeAt(index);\r\n  } \r\n\r\n\r\n\r\n  public step = 0;\r\n  setStep(index: number) {\r\n    this.step = index;\r\n  }\r\n  onSubmitForm(form){\r\n    if(this.submitForm.get(form).valid){\r\n      this.nextStep();\r\n      if(form == \"media\"){\r\n        this.snackBar.open('The property \"' + this.property.title + '\" has been updated.', '×', {\r\n          verticalPosition: 'top',\r\n          duration: 5000 \r\n        }); \r\n      }\r\n    }\r\n  }\r\n  nextStep() {\r\n    this.step++;\r\n  }\r\n  prevStep() {\r\n    this.step--;\r\n  }\r\n\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjY291bnQvZmF2b3JpdGVzL2Zhdm9yaXRlcy5jb21wb25lbnQuc2NzcyJ9 */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { Property } from 'src/app/app.models';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-favorites',\r\n  templateUrl: './favorites.component.html',\r\n  styleUrls: ['./favorites.component.scss']\r\n})\r\nexport class FavoritesComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'image', 'title', 'actions' ];\r\n  dataSource: MatTableDataSource<Property>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  constructor(public appService:AppService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataSource = new MatTableDataSource(this.appService.Data.favorites);\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.sort = this.sort;\r\n  }\r\n\r\n  public remove(property:Property) {\r\n    const index: number = this.dataSource.data.indexOf(property);    \r\n    if (index !== -1) {\r\n      this.dataSource.data.splice(index,1);\r\n      this.dataSource = new MatTableDataSource<Property>(this.dataSource.data);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    } \r\n  }\r\n\r\n  public applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjY291bnQvbXktcHJvcGVydGllcy9teS1wcm9wZXJ0aWVzLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { AppService } from 'src/app/app.service';\r\nimport { Property } from 'src/app/app.models';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n  selector: 'app-my-properties',\r\n  templateUrl: './my-properties.component.html',\r\n  styleUrls: ['./my-properties.component.scss']\r\n})\r\nexport class MyPropertiesComponent implements OnInit {\r\n  displayedColumns: string[] = ['id', 'image', 'title', 'published', 'views', 'actions' ];\r\n  dataSource: MatTableDataSource<Property>;\r\n  @ViewChild(MatPaginator) paginator: MatPaginator;\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  \r\n  constructor(public appService:AppService) { }\r\n\r\n  ngOnInit() {\r\n    this.appService.getProperties().subscribe(res => {\r\n      this.dataSource = new MatTableDataSource(res);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    });    \r\n  }\r\n  \r\n  public remove(property:Property) {\r\n    const index: number = this.dataSource.data.indexOf(property);    \r\n    if (index !== -1) {\r\n      this.dataSource.data.splice(index,1);\r\n      this.dataSource = new MatTableDataSource<Property>(this.dataSource.data);\r\n      this.dataSource.paginator = this.paginator;\r\n      this.dataSource.sort = this.sort;\r\n    } \r\n  }\r\n\r\n  public applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.dataSource.paginator) {\r\n      this.dataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2FjY291bnQvcHJvZmlsZS9wcm9maWxlLmNvbXBvbmVudC5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { emailValidator, matchingPasswords } from 'src/app/theme/utils/app-validators';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  public infoForm:FormGroup;\r\n  public passwordForm:FormGroup;\r\n  constructor(public formBuilder: FormBuilder, public snackBar: MatSnackBar) { }\r\n\r\n  ngOnInit() {\r\n    this.infoForm = this.formBuilder.group({\r\n      name: ['', Validators.compose([Validators.required, Validators.minLength(3)])],\r\n      email: ['', Validators.compose([Validators.required, emailValidator])],\r\n      phone: ['', Validators.required],\r\n      image: null,      \r\n      organization: null,\r\n      facebook: null,\r\n      twitter: null,\r\n      linkedin: null,\r\n      instagram: null,\r\n      website: null\r\n    });\r\n    this.passwordForm = this.formBuilder.group({\r\n      currentPassword: ['', Validators.required],\r\n      newPassword: ['', Validators.required],\r\n      confirmNewPassword: ['', Validators.required]\r\n    },{validator: matchingPasswords('newPassword', 'confirmNewPassword')});\r\n  }\r\n\r\n  public onInfoFormSubmit(values:Object):void {\r\n    if (this.infoForm.valid) {\r\n      console.log(values)\r\n      this.snackBar.open('Your account information updated successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n    }\r\n  }\r\n\r\n  public onPasswordFormSubmit(values:Object):void {\r\n    if (this.passwordForm.valid) {\r\n      this.snackBar.open('Your password changed successfully!', '×', { panelClass: 'success', verticalPosition: 'top', duration: 3000 });\r\n    }\r\n  }\r\n\r\n}\r\n"]}